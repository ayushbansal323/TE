SECTION .data
	nline db 10,10
	nline_len equ $-nline

	ano	db 	10,"  Assignment No. :1",10
	   	db	"Positive / Negative elments form 64-bit array",10
	ano_len equ	$-ano

	arr64	dq -111111H, 222222H, 33333333H, 44444444H, 55555555H
	
	n	equ	5

	pmsg	db 10,10,"The no. of Positive elements from 64-bit array:"

	pmsg_len equ $-pmsg
	
	nmsg	db 10,10,"The no. of Negative elements from 64-bit array:"
 
	nmsg_len equ $-nmsg




SECTION .bss
	p_count		resq	 1
	n_count		resq	 1

	char_ans	resb	 16

%macro Print 2
	mov	rax, 1
	mov	rdi, 1
	mov	rsi, %1
	mov	rdx, %2
	syscall
%endmacro

%macro Read 2
	mov	rax, 0
	mov	rdi, 0
	mov	rsi, %1
	mov	rdx, %2
	syscall
%endmacro

%macro	Exit	0
	mov	rax, 60
	mov	rdi, 0
	syscall
%endmacro




SECTION .text
	global _start
_start:
	Print	ano, ano_len
	mov	rsi, arr64
	mov	rcx, n
	mov	rbx, 0;
	mov	rdx, 0;

next_num:
	mov	rax,[rsi]
	shl	rax,1
	jc	negative

positive:
	inc	rbx
	jmp	next

negative:
	inc	rdx
next:
	add 	rsi, 8
	dec	rcx
	jnz	next_num
	mov	[p_count], rbx
	mov	[n_count], rdx
	Print	pmsg, pmsg_len
	mov	rax,[p_count]
	call disp8_proc
	Print	nmsg, nmsg_len
	mov	rax,[n_count]
	call disp8_proc
	Print nline, nline_len
	Exit
disp8_proc:

	mov	rsi, char_ans+1
	mov	rcx, 2
	mov	rbx, 16

next_digit:
	mov	rdx, 0
	div	rbx
	cmp	dl, 09h
	jbe	add30
	add	dl, 07h
add30:
	add	dl,30h
	mov	[rsi],dl
	dec	rsi
	dec	rcx
	jnz	next_digit

	Print char_ans, 2
ret
	






























	

